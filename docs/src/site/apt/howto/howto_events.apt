~~
~~	Copyright 2010 OpenEngSB Division, Vienna University of Technology
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~
HowTo - Event example

* The problem

  When a commit happens in the edb, all subscribed members should be notified, except the commiter himself using the event-system and drools-workflow engine.

* Basic Sequence of actions

  * When a commit-message is received by the edb-endpoint, it generates an EdbCommitEvent and sends it to the workflow-service.
  
  * The workflow-su accesses the associated rulebase to determine how the event should be handled.
  
  * In our example the rule fires on every EdbCommitEvent and sends notifications to all emailadresses associated with the context.

  
* How to implement this

** Endpoint

  The endpoint must be setup to generate the events. The following code was added to the endpoints process-method:

--------------------------------------------------------------------------------
EdbCommitEvent event = new EdbCommitEvent();
event.setAuthor(author);
MessageProperties msgProperties = readProperties(in);
EventHelper helper = new EventHelperImpl(this, msgProperties);
helper.sendEvent(event);
--------------------------------------------------------------------------------

  But with only this code, the endpoint does not know where to send the message. So we add an EventEndpoint. In this case we just want to forward the event to the workflow engine, so the EventEndpoint is just a derivate of EventForwardEndpoint (from openengsb-core).

** Rule

  The event gets processed in a drools-rule-engine provided by the workflow-service. The example-rule that we use to realize the notification looks like this:

--------------------------------------------------------------------------------
rule "notify_on_commit"
dialect "mvel"
when
	e : EdbCommitEvent()
then
	String author = e.getAuthor();
	Map emails = ctx.getAllValues("workflows/edbcommit/notification/email/"); // retrieve emails from context
	String subject = "[openengsb] Edb-Commit-notification";
	String message = "Hi, someone just made an edb-commit";
	notifyAllExceptAuthor(notification, emails, author, subject, message) // user-defined function
end
--------------------------------------------------------------------------------

  Since mvel-strict-mode does not allow if-statements in rule-consequences, the actual sending of the notification must be done in a separate function, that iterates over all emails previously retreived from the context.

  The notification-helper in the rulebase's working memory wraps a method that sends the notification to the corresponding notification-endpoint which actually sends the email.

--------------------------------------------------------------------------------
function void notifyAllExceptAuthor(NotificationDomain notification, Map emails, String author, String subject, String message) {
	Iterator it = emails.keySet().iterator();
	boolean hasNext = it.hasNext();
	while(hasNext){
		String member = (String) it.next();
		if !author.equals(member){
			Notification n = new Notification();
			n.setSubject(subject);
			n.setRecipient(member);
			n.setMessage(message);
			notification.notify(n);
		}
		hasNext = it.hasNext();
	}
}
--------------------------------------------------------------------------------

** Test-setup

  An automated test added to the edb-se, supports the understanding of what is going on here. The testCommitNotification()-method in CommitServiceTest tests the sequence of actions described above.
  The drools-endpoint used in this tests uses the file rule1.drl as rulebase. The nofification that is triggerd in the rule is handled by a mocked Notification-endpoint, that only records all notifications that it is supposed to send.
