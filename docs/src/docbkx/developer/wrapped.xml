<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

   Copyright 2010 OpenEngSB Division, Vienna University of Technology

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

-->
<chapter id="wrapped" xmlns="http://docbook.org/ns/docbook">
  <title>Prepare and Use Non-OSGi Artifacts</title>

  <para>
	The OpenEngSB, based on Servicemix4 runs in an OSGi engine. While, using JBI package the artifacts directly to
	the poms there could be some exceptions where it is prefered to use deploy them direcly into the OSGi Environment
	(Apache Felix Karaf for Servicemix). Nevertheless, not all libraries have an OSGi MANIFEST.MF file. Karaf can create
	them on the fly, but nevertheless the autogenerated manifest files sometimes do not work as expected. In this case
	the artifacts can be wrapped with the help of the maven-bundle-plugin. The infrastructure for this action is provided
	in the wrapper directory for the OpenEngsB.
  </para>

  <section id="wrapped.use">
    <title>Use Wrapped Jars</title>
	<para>
	  Basically, wrapped jars do not differ in any way from basic maven artifacts, besides that they are deployable
	  in OSGi environments. If it is requred to use these artifacts in the OpenEngSB nothing specific has to be done.
	  All artifacts in the wrapped directory are deployed in a maven repository which is added to the root pom. Therefore
	  these artifacts can be used directly. In any case you like to build these artifacts on your own point your console
	  to the wrapped directory and execute <literal>mvn clean install</literal>. This will install the artifacts in the
	  local maven repository and make them available for the application.
    </para>
  </section>

  <section id="wrapped.base">
    <title>Create Wrapped library</title>
    <para>
      This chapter explains how to create a wrapped jar step by step.
    </para>
    <orderedlist>
      <listitem><para>
      	In case that no already wrapped library is available in the public repositories a package has to be created. While
        there are packages available to generate the project they are not requred. Most of the work is already abstracted
        into the root-pom of the wrapped directory. Therefore the project should be crated manually. First of all create
        a folder with the name of the project you like to wrap. Typically the groupId of the bundle to wrap is sufficient.
        For example, for a project wrapping all wicket bundles the folder org.apache.wicket is created.
	  </para></listitem>
	  <listitem><para>
	  	As a next step add the newly created folder as a module to the wrapped/pom.xml file in the module section. For the
		formerly created wicket project org.apache.wicket should be added to the module section.
	  </para></listitem>
	  <listitem><para>
	  	Now create an pom.xml file and a osgi.bnd file in the newly created project folder.
      </para></listitem>
	  <listitem><para>
	  	The pom.xml contains the basic project information. As parent for the project the wrapped/pom.xml should be used.
		Basically for every wrapped jar the project has the following structure:
        <programlisting format="linespecific" language="xml">
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!--
OPENENGSB LICENSE
-->
&lt;project>

  &lt;parent>
    &lt;groupId>org.openengsb.wrapped&lt;/groupId>
    &lt;artifactId>openengsb-wrapped&lt;/artifactId>
    &lt;version>1&lt;/version>
  &lt;/parent>

  &lt;properties>
    &lt;bundle.symbolicName>wrapped_jar_group_id&lt;/bundle.symbolicName>
    &lt;wrapped.groupId>wrapped_jar_group_id&lt;/wrapped.groupId>
    &lt;wrapped.artifactId>wrapped_jar_artifact_id&lt;/wrapped.artifactId>
    &lt;wrapped.version>wrapped_jar_version&lt;/wrapped.version>
    &lt;bundle.namespace>${wrapped.groupId}&lt;/bundle.namespace>
  &lt;/properties>

  &lt;modelVersion>4.0.0&lt;/modelVersion>
  &lt;groupId>${wrapped.groupId}&lt;/groupId>
  &lt;artifactId>${parent.groupId}.${wrapped.groupId}&lt;/artifactId>
  &lt;version>${wrapped.version}&lt;/version>

  &lt;name>${bundle.symbolicName}&lt;/name>

  &lt;packaging>bundle&lt;/packaging>

  &lt;dependencies>
    &lt; all_jars_which_should_be_embedded />
  &lt;/dependencies>

&lt;/project>
        </programlisting>
      </para></listitem>
	  <listitem><para>
        The osgi.bnd file contains the OSGi specific statements for the maven-bundle-plugin. While the default export
		and import is already handled in the root pom only project specific settings have to be configured here. For
		example always all packages witin inthe bundle-namespace are exported. This is for most scenarios sufficient.
		In addition all dependencies foudn are automatically imported as requred. This is mostly not what is wanted.
		Instead the parts of the library which have to be importated should be defined separated. The following listing
		should give an short example how such a osgi.bnl file can look like. For a full list of possible commands
		see the <ulink url="http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html">maven-bundle-plugin documentation</ulink>.
		<programlisting format="linespecific" language="xml">
#
# OPENENGSB LICENSE
#
Embed-Dependency: *;scope=compile|runtime;type=!pom;inline=true

Import-Package: sun.misc;resolution:=optional,\
javax.servlet;version="[2.5.0, 3.0.0)",\
*;resolution:=optional
		</programlisting>
      </para></listitem>
	</orderedlist>
  </section>

  <section id="wrapped.workflow">
  	<title>Workflow</title>
	<para>
      The regular OpenEngSB typically does not have to modify anything within this directory. In addition all artifacts
	  in this part are independent of the the typical OpenEngSB build and deploy life-cycle. The versions within these
	  artifacts change completely independent of the OpenEngSB. Therefore this directory and its subprojects are not
	  entered within the module section of the root pom! Instead, if it is really required to build them (e.g. if a new
	  artifact is added) the maven commands have to be executed directly in the wrapped sub-directory.
	</para>
	<para>
	  If a developer adds a new library in this folder it is NOT directly available to all other developers. For testing
	  it is possible that the other developers build the wrapped directory independently. Nevertheless, the proposed
	  solution is to inform a project admin about the new library in you branch. The admin can simply deploy (using
	  <literal>maven clean install deploy</literal>) your artifacts to the maven repositories. Afterwards the wrapped
	  artifacts are downloaded for all other developers during the build process.
	</para>
  </section>

</chapter>
