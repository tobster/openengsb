<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

   Copyright 2010 OpenEngSB Division, Vienna University of Technology

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

-->
<chapter id="architecture" xmlns="http://docbook.org/ns/docbook">
  <title>Architecture of the EngSB</title>
  <para>
    Since this manual is the user manual only a very basic overview over the architecture should be given. For more
    detailed overview use the own architectural manual also provided at openengsb.org.
  </para>
    <section id="architecture.connectors">
        <title>Connectors</title>
        <para>
          TBW(General parts about the connctors)
        </para>
        <para>
          Actually there are two different kinds of connectors - internal and external ones. 
          <link linkend="internalConnectors">Internal connectors</link> are directly implemented into the OpenEngSB
          and could be used to access external tools or be able to embed tools completely into the OpenEngSB. Differently
          <link linkend="externalConnectors">external connectors</link> are written outside of the OpenEngSB. This requires
          them to be available from the bus and to communicate with the bus. Both ways of communication have to be established
          via an external protocol, since the internal communication module could not be used. Since most connectors
          not directly produced by the OpenEngSB team or contributors will be 
          <link linkend="externalConnectors">external connectors</link> we will start with them. 
        </para>
    </section>
    <section id="architecture.domain">
        <title>Domains</title>
        <para>
          Explain domains and 
        </para>
    </section>
    <section id="architecture.messageFlow">
      <title>Message flow in the OpenEngSB</title>
      <para>
        TBW(Describe event and message flow for the OpenEngSB)
      </para>
      <para>
      !!Service Call!! Control flow (domain - rule engine interaction): event to rule engine - rule action; uses rpc 
      endpoints (domains - drools domain package); domain may manipulate event; domain may generate new events; domain
       may return event to rule engine

      Domain structure: domain name, event type (uid, e.g. class name), tool name, data(tree structure, key-value pairs),
      process id to identify the process afterwards and through different services and events

      Tool connector structure: uses rpc endpoints (linking, ..)

      !!Event Flow!! Notification process (tool to rule engine): adapter, file, .. - event; event to domain; domain 
      enriches event payload (- data); domain forwards event to rule engine; rule engine processes event properties

      Event Structure: domain name, event type (uid, e.g. class name), tool name, data (tree structure, key-value 
      pairs); metadata: contextID and processID
      </para>
    </section>
</chapter>
